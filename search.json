[{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://montesmariana.github.io/semcloud/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://montesmariana.github.io/semcloud/articles/processClouds.html","id":"one-unit-workflow","dir":"Articles","previous_headings":"","what":"One unit workflow","title":"processClouds","text":"","code":"# based on the directory structure resulting from the Python workflow lemma <- 'name_of_lemma' base_dir <- \"path/to/data\" # path for example data input_dir <- file.path(base_dir, \"output\", \"tokens\", lemma) # where the data is stored cw_dir <- file.path(base_dir, \"output\", \"cws\", lemma) output_dir <- file.path(base_dir, \"github\", lemma) # where the data will go"},{"path":"https://montesmariana.github.io/semcloud/articles/processClouds.html","id":"token-coordinates","dir":"Articles","previous_headings":"One unit workflow","what":"Token coordinates","title":"processClouds","text":"order compute token coordinates, first need decide solutions going choose, , whether going run nMDS , case run t-SNE, perplexities interested . might even want run UMAP (available yet code). end mostly looked t-SNE perplexity 30, show instructions options. Note examples 60 tokens, using t-SNE, specially perplexity 30, kind overkill . ’ll go lower number. can set files store solutions mapping. semcloud::getClouds() function groups full “workflow”: 1. sets one empty dataframe per item solution, stored [lemma].[solution].tsv file. file files_list: 2.1 extracts model name 2.2 loads file semcloud::tokensFromPac() 2.3 logrank = TRUE (default), applies transformation 2.4 applies corresponding algorithm extracts coordinates 2.5 appends coordinates columns preceded name model corresponding dataframe addition, “mds” one algorithms, return list stress values. can read file readr::read_tsv().","code":"# This list works for a loop in the function below and should then be stored as a json file # in the github directory of each lemma, to tell the visualization what is being used solutions_old <- list(\"mds\" = \".mds\") for (perp in c(10, 20, 30, 50)) {     solutions_old[[paste0(\"tsne\", perp)]] = paste0(\".tsne.\", perp) } solutions_old solutions <- list(\"tsne10\" = \".tsne.10\") suffix <- \".ttmx.dist.pac\" models_file <- file.path(output_dir, paste0(lemma, '.models.tsv')) files_list <- paste0(read_tsv(models_file, lazy = FALSE)$`_model`, suffix) write(rjson::toJSON(solutions), file.path(output_dir, paste0(lemma, \".solutions.json\"))) file.exists(file.path(input_dir, files_list[1])) getClouds(input_dir, output_dir, files_list, lemma, solutions) read_tsv(file.path(output_dir, paste0(lemma, \".tsne.10.tsv\")))"},{"path":"https://montesmariana.github.io/semcloud/articles/processClouds.html","id":"context-words-coordinates","dir":"Articles","previous_headings":"One unit workflow","what":"Context words coordinates","title":"processClouds","text":"context words, workflow exactly tokens. difference files saved .csv (reason R read .wwmx...pac) uses focdistsFromCsv() function.","code":"suffix <- \".wwmx.dist.csv\" files_list <- paste0(read_tsv(models_file)$`_model`, suffix)  getClouds(cw_dir, output_dir, files_list, lemma, solutions, type = \"focdists\")"},{"path":"https://montesmariana.github.io/semcloud/articles/processClouds.html","id":"model-distances-and-coordinates","dir":"Articles","previous_headings":"One unit workflow","what":"Model distances and coordinates","title":"processClouds","text":"function belows loads [lemma].models.tsv file output_dir order modify appending coordinates nMDS distances models. default, compute “euclidean” distances transformed matrices, function can changed fun argument, transformation can turned transformed argument. returns data register (tend combine across lemmas store euclidean_register.tsv tell index visualization lemmas offer :) hood, also stores distance matrix [lemma].models.dist.tsv. file already exists, loads instead recomputing distances. output tibble::tibble().","code":"reg <- compLemma(lemma, input_dir, output_dir) reg"},{"path":"https://montesmariana.github.io/semcloud/articles/processClouds.html","id":"medoids","dir":"Articles","previous_headings":"One unit workflow","what":"Medoids","title":"processClouds","text":"medoids simply calculated cluster::pam() basic information stored [lemma].medoids.tsv file. important column visualization medoids. can also add clustering information models register.","code":"k <- 8 # number of medoids you want distmtx <- read_tsv(file.path(output_dir, paste0(lemma, \".models.dist.tsv\"))) %>%    matricizeCloud() %>% as.dist() pam_data <- pam(distmtx, k = k) medoid_data <- pam_data$clusinfo %>%   as_tibble() %>%   mutate(medoids = pam_data$medoids, medoid_i = seq(k))  write_tsv(medoid_data, file.path(output_dir, paste0(lemma, \".medoids.tsv\"))) medoid_data models_file <- file.path(output_dir, paste0(lemma, \".models.tsv\")) read_tsv(models_file, lazy= FALSE) %>%      mutate(         pam_cluster = pam_data$clustering[`_model`], # add pam-cluster number         medoid = pam_data$medoids[pam_cluster] # add name of medoid     ) %>%      write_tsv(models_file)"},{"path":"https://montesmariana.github.io/semcloud/articles/processClouds.html","id":"hdbscan","dir":"Articles","previous_headings":"One unit workflow","what":"HDBSCAN","title":"processClouds","text":"’ve mostly computed HDBSCAN among medoids, certainly computed models. HDBSCAN information, clustering membership probabilities eps, principle included NephoVis, haven’t done result varies per model, meaning token 200 columns (8 ’s medoids, ’s still lot), hard incorporate tool. Instead, work RDS file list models per lemma, model object includes: coordinates: coordinates t-SNE perplexity 30, next variables “variables” dataframe like, case, “senses”, well tailored list context words. add token-wise HDBSCAN info cws: distribution first-order context words across HDBSCAN clusters t-SNE coordinates available (optionally) normal HDBSCAN plot output named list models: coords element data per token: Next , cws element data per context word per cluster; coordinates, become zeros:","code":"# You could run it on all the models or just the medoids # models <- read_tsv(file.path(output_dir, lpaste0(lemma, \".models.tsv\")))$`_model` # all models models <- read_tsv(file.path(output_dir, paste0(lemma, \".medoids.tsv\")))$medoids # only medoids res <- map(setNames(models, models),            summarizeHDBSCAN, lemma = lemma,            input_dir = input_dir,            output_dir = output_dir,            coords_name = '.tsne.10')  # I would normally make one of these files for all my lemmas and store it within the github directory above the lemma subdirectories to_write <- list() to_write[lemma] <- res write_rds(to_write, file.path(output_dir, \"hdbscan.rds\")) names(res) res[[1]]$coords res[[1]]$cws"},{"path":"https://montesmariana.github.io/semcloud/articles/processClouds.html","id":"loops-across-multiple-lemmas","dir":"Articles","previous_headings":"","what":"Loops across multiple lemmas","title":"processClouds","text":"","code":"lemmas <- c('lemma1', 'lemma2', 'lemma3') #or whatever they are base_dir <- system.file(\"extdata\") # path for example data input_dir <- file.path(base_dir, \"output\", \"tokens\") # where the data is stored cw_dir <- file.path(base_dir, \"output\", \"cws\") output_dir <- file.path(base_dir, \"github\") # where the data will go solutions <- list(\"tsne30\" = \".tsne.30\")  # Token level ---- suffix <- \".ttmx.dist.pac\" for (lemma in lemmas) {   models_file <- file.path(output_dir, lemma, paste0(lemma, '.models.tsv'))   files_list <- paste0(read_tsv(models_file, lazy = FALSE)$`_model`, suffix)   write(toJSON(solutions), file.path(output_dir, lemma, paste0(lemma, \".solutions.json\")))   getClouds(file.path(input_dir, lemma), file.path(output_dir, lemma), files_list, lemma, solutions) }  # Context words level ----  suffix <- \".wwmx.dist.csv\" for (lemma in lemmas) {   models_file <- file.path(output_dir, lemma, paste0(lemma, '.models.tsv'))   files_list <- paste0(read_tsv(models_file, lazy = FALSE)$`_model`, suffix)   getClouds(file.path(cw_dir, lemma), file.path(output_dir, lemma), files_list, lemma, solutions) }  # Distances between models ---- reg <- map_dfr(lemmas, ~compLemma(.x, file.path(input_dir, .x), file.path(output_dir, .x))) write_tsv(reg, file.path(output_dir, \"euclidean_register.tsv\"))  # Medoids ----  k <- 8 for (lemma in lemmas) {   distmtx <- read_tsv(file.path(output_dir, lemma, paste0(lemma, \".models.dist.tsv\"))) %>%     matricizeCloud() %>% as.dist()   pam_data <- pam(distmtx, k = k)   medoid_data <- pam_data$clusinfo %>% as_tibble() %>% mutate(medoids = pam_data$medoids, medoid_i = seq(k))   write_tsv(medoid_data, file.path(output_dir, lemma, paste0(lemma, \".medoids.tsv\")))   models_file <- file.path(output_dir, lemma, paste0(lemma, \".models.tsv\"))   read_tsv(models_file, lazy = FALSE) %>%     mutate(       pam_cluster = pam_data$clustering[`_model`], # add pam-cluster number       medoid = pam_data$medoids[pam_cluster] # add name of medoid       ) %>%     write_tsv(models_file) }  # HDBSCAN ---- map(setNames(lemmas, lemmas), function(lemma){   models <- read_tsv(file.path(output_dir, paste0(lemma, \".medoids.tsv\")))$medoids # only medoids   map(setNames(models, models),       summarizeHDBSCAN, lemma = lemma,       input_dir = file.path(input_dir, lemma),       output_dir = file.path(output_dir, lemma)) }) %>%   write_rds(file.path(output_dir, \"hdbscan.rds\"))"},{"path":"https://montesmariana.github.io/semcloud/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mariana Montes. Author, maintainer.","code":""},{"path":"https://montesmariana.github.io/semcloud/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Montes, Mariana. (2021). semcloud (0.1.0). Zenodo. https://doi.org/10.5281/zenodo.5596374 Montes, Mariana. (2021). Cloudspotting. Visual Analytics distributional semantics. PhD Dissertation, KU Leuven.","code":"@Manual{,   title = {semcloud},   author = {Mariana Montes},   year = {2021},   url = {https://github.com/montesmariana/semcloud},   doi = {10.5281/zenodo.5596374}, } @PhdThesis{,   title = {Cloudspotting: Visual analytics for distributional semantics},   author = {Mariana Montes},   year = {2021},   url = {https://cloudspotting.marianamontes.me/},   school = {KU Leuven, Belgium}, }"},{"path":"https://montesmariana.github.io/semcloud/index.html","id":"semcloud-","dir":"","previous_headings":"","what":"Create token-level clouds","title":"Create token-level clouds","text":"goal semcloud process output Python Workflow Nephological Semantics project (combining nephosem semasioFlow) prepare used NephoVis.","code":""},{"path":"https://montesmariana.github.io/semcloud/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create token-level clouds","text":"can install github development version :","code":"remotes::install_github(\"montesmariana/semcloud\")"},{"path":"https://montesmariana.github.io/semcloud/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Create token-level clouds","text":"can find notebook workflow package meant support vignette package. access , ’ll specify vignettes must built, can find Articles section:","code":"remotes::install_github(\"montesmariana/semcloud\", build_vignettes = T) vignette('processClouds', 'semcloud')"},{"path":"https://montesmariana.github.io/semcloud/index.html","id":"cloud-classification","dir":"","previous_headings":"Example","what":"Cloud classification","title":"Create token-level clouds","text":"Based output code shown vignette, possible classify clouds shown Chapter 5 Montes (2021) running following code:","code":"models <- readRDS('/output/of/summarizeHDBSCAN') ttmx_dir <- 'path/to/distance/matrices'  # For one model lname <- names(models)[[1]] mname <- names(models[[lname]]$medoidCoords)[[1]]  classifyModel(models[[lname]]$medoidCoords[[1]],              names(models[[lname]]$medoidCoords)[[1]],              file.path(ttmx_dir, lname))               # For all models, all lemmas classification <- purrr::imap_dfr(models, function(ldata, lname){     purrr::imap_dfr(models[[lname]]$medoidCoords, classifyModel,     ttmx_dir = file.path(ttmx_dir, lname)) %>%      dplyr::mutate(lemma = lname) })"},{"path":"https://montesmariana.github.io/semcloud/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Create token-level clouds","text":"program free software: can redistribute /modify terms GNU General Public License published Free Software Foundation, either version 3 License, (option) later version. program distributed hope useful, WITHOUT WARRANTY; without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE. See GNU General Public License details. received copy GNU General Public License along program. , see http://www.gnu.org/licenses/.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/classifyModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify clouds in a model — classifyModel","title":"Classify clouds in a model — classifyModel","text":"Classify clouds model","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/classifyModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify clouds in a model — classifyModel","text":"","code":"classifyModel(mdata, mname, ttmx_dir, suffix = \".ttmx.dist.pac\")"},{"path":"https://montesmariana.github.io/semcloud/reference/classifyModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify clouds in a model — classifyModel","text":"mdata Data model, given summarizeHDBSCAN. mname Name model; name mdata. ttmx_dir Directory token-level distance matrices stored. suffix Suffix file names token-level distance matrices; function assumes name file name medoid plus suffix.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/classifyModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify clouds in a model — classifyModel","text":"table one row per cluster model, columns created clusterSeparation, clusterHDBSCAN clusterDistance classification cluster based Nephological Shapes Montes (2021) (see Chapter 5for full description examples).","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/classifyModel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify clouds in a model — classifyModel","text":"Montes M (2021). Cloudspotting: Visual Analytics Distributional Semantics. Ph.D. thesis, KU Leuven, Leuven.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/classifyModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify clouds in a model — classifyModel","text":"","code":"if (FALSE) { purrr::imap_dfr(models$medoidCoords, classifyModel, ttmx_dir = 'path/to/dir') }"},{"path":"https://montesmariana.github.io/semcloud/reference/cleanWord.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Word column — cleanWord","title":"Clean Word column — cleanWord","text":"Function convert word forms coming QLVLNewsCorpus towards something friendly HTML rendering.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/cleanWord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Word column — cleanWord","text":"","code":"cleanWord(txt)"},{"path":"https://montesmariana.github.io/semcloud/reference/cleanWord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Word column — cleanWord","text":"txt word form","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/cleanWord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Word column — cleanWord","text":"Converted string.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute distances per cluster — clusterDistance","title":"Compute distances per cluster — clusterDistance","text":"Compute distances per cluster","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute distances per cluster — clusterDistance","text":"","code":"clusterDistance(clustering, dists)"},{"path":"https://montesmariana.github.io/semcloud/reference/clusterDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute distances per cluster — clusterDistance","text":"clustering Named vector token IDs names (HDBSCAN) clusters values. assume cluster least 8 items. dists Long format table one row per pair tokens (), distance , cluster first token belongs whether belong cluster.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute distances per cluster — clusterDistance","text":"tibble one row per cluster various distance-derived values: min_, mean_ max_identicals Minimum, mean maximum number identical tokens per token cluster. min_, mean_ max_k8 Minimum, mean maximum distance token cluster 8th nearest neighbour. min_, mean_, max_ sd_inner_dist Minimum, mean, maximum distance, well standard deviation, token cluster tokens cluster. min_, mean_, max_ sd_outer_dist Minimum, mean, maximum distance, well standard deviation, token cluster tokens clusters.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterHDBSCAN.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize HDBSCAN data per cluster — clusterHDBSCAN","title":"Summarize HDBSCAN data per cluster — clusterHDBSCAN","text":"Summarize HDBSCAN data per cluster","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterHDBSCAN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize HDBSCAN data per cluster — clusterHDBSCAN","text":"","code":"clusterHDBSCAN(m)"},{"path":"https://montesmariana.github.io/semcloud/reference/clusterHDBSCAN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize HDBSCAN data per cluster — clusterHDBSCAN","text":"m Tibble one token per row HDBSCAN information. coords element model resulting summarizeHDBSCAN.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterHDBSCAN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize HDBSCAN data per cluster — clusterHDBSCAN","text":"Tibble one row per cluster various HDBSCAN-derived values: min_, mean_, max_ sd_cws Minimum, mean maximum, well standard deviation, number first-order context words per token cluster. min_, mean_, max_ sd_eps Minimum, mean maximum, well standard deviation, \\(\\epsilon\\) value tokens cluster. size, rel_size Absolute number tokens cluster proportion modelled tokens covered cluster. deeper_than_noise Proportion tokens cluster \\(\\epsilon\\) value lower minimum \\(\\epsilon\\) noise tokens model. cw_tokens, _types, _ttratio Union first-order context words tokens cluster: number types tokens type-token ratio.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterSeparation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Semvar values on clusters — clusterSeparation","title":"Compute Semvar values on clusters — clusterSeparation","text":"Compute Semvar values clusters","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterSeparation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Semvar values on clusters — clusterSeparation","text":"","code":"clusterSeparation(m)"},{"path":"https://montesmariana.github.io/semcloud/reference/clusterSeparation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Semvar values on clusters — clusterSeparation","text":"m Tibble one token per row HDBSCAN information. coords element model resulting summarizeHDBSCAN.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/clusterSeparation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Semvar values on clusters — clusterSeparation","text":"tibble one row per cluster output separationkNN silhouettefor class, based coordinates input including excluding noise tokens.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/compLemma.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare models of a lemma — compLemma","title":"Compare models of a lemma — compLemma","text":"Compute pairwise distances lemmas, store distance matrix, reduce two dimensions metaMDS, store return summary.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/compLemma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare models of a lemma — compLemma","text":"","code":"compLemma(   lemma,   input_dir,   output_dir,   transformed = TRUE,   fun = \"euclidean\",   tokens_suffix = \".ttmx.dist.pac\",   row_selection = vector(),   overwrite = FALSE )"},{"path":"https://montesmariana.github.io/semcloud/reference/compLemma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare models of a lemma — compLemma","text":"lemma Name lemma, filenames input_dir Directory models stored. output_dir Directory model information stored transformed Whether distance matrices fun Function calculate distances. tokens_suffix Suffix add model name file names distance matrices. row_selection List row (column) names subset matrices. overwrite FALSE models.dist file exists, created .","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/compLemma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare models of a lemma — compLemma","text":"tibble minimal information","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/correctDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct Distance values — correctDistance","title":"Correct Distance values — correctDistance","text":"Remove rows count distance computation recalculate distances.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/correctDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct Distance values — correctDistance","text":"","code":"correctDistance(cws, distance_corrector_func)"},{"path":"https://montesmariana.github.io/semcloud/reference/correctDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct Distance values — correctDistance","text":"cws Dataframe outputted listContextwords (semasioFlow Python module). distance_corrector_func Function applied word variable remove irrelevant lines.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/correctDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct Distance values — correctDistance","text":"Tibble context word ids corrected distance conc_distance.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/customDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute distances between models — customDist","title":"Compute distances between models — customDist","text":"Three functions compute distances (token) matrices supported: \"euclidean\" runs eucliMats, computes tokenwise euclidean distances averages ; \"procrustes\" runs procrustes via procMats; \"mantel\" runs mantel via mantelMats.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/customDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute distances between models — customDist","text":"","code":"customDist(   mnames,   input_dir,   transformed = TRUE,   fun = c(\"euclidean\", \"procrustes\", \"mantel\"),   tokens_suffix = \".ttmx.dist.pac\",   row_selection = vector() )"},{"path":"https://montesmariana.github.io/semcloud/reference/customDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute distances between models — customDist","text":"mnames List model names. input_dir Directory models stored. transformed Whether distance matrices fun Function calculate distances. tokens_suffix Suffix add model name file names distance matrices. row_selection List row (column) names subset matrices.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/customDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute distances between models — customDist","text":"distance matrix (matrix object) models rows columns.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/cwsForClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Map context words and HDBSCAN clusters — cwsForClusters","title":"Map context words and HDBSCAN clusters — cwsForClusters","text":"function expects dataframe least token-id's (e.g. _id), column character vectors context words (e.g. cws) column names clusters (e.g. cluster). example shows also turn ;-separated values character vectors within tibble dataframe.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/cwsForClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map context words and HDBSCAN clusters — cwsForClusters","text":"","code":"cwsForClusters(variables, cws_column, cluster_column, b = 1)"},{"path":"https://montesmariana.github.io/semcloud/reference/cwsForClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map context words and HDBSCAN clusters — cwsForClusters","text":"variables Dataframe IDs, clusters lists context words cws_column Character string: Name column character vectors (one per row) context words cluster_column Character string: Name column name clusters (must factor) b Weight computing fscore","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/cwsForClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map context words and HDBSCAN clusters — cwsForClusters","text":"tibble one row per context word per cluster, frequency information.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/cwsForClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map context words and HDBSCAN clusters — cwsForClusters","text":"","code":"if (FALSE) {  variables <- dplyr::mutate(variables, cws = stringr::str_split(cws, \";\")) cwsForClusters(variables, \"cws\", \"cluster\")  }"},{"path":"https://montesmariana.github.io/semcloud/reference/eucliMats.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean euclidean distance — eucliMats","title":"Mean euclidean distance — eucliMats","text":"Computes euclidean distance individual vectors takes mean.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/eucliMats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean euclidean distance — eucliMats","text":"","code":"eucliMats(mat1, mat2)"},{"path":"https://montesmariana.github.io/semcloud/reference/eucliMats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean euclidean distance — eucliMats","text":"mat1 First matrix mat2 Second matrix","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/eucliMats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean euclidean distance — eucliMats","text":"Distance matrix","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/extractHDBSCAN.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract HDBSCAN info — extractHDBSCAN","title":"Extract HDBSCAN info — extractHDBSCAN","text":"Run hdbscan distance matrix gather information.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/extractHDBSCAN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract HDBSCAN info — extractHDBSCAN","text":"","code":"extractHDBSCAN(dstmtx, minPts = 8, includePlot = FALSE)"},{"path":"https://montesmariana.github.io/semcloud/reference/extractHDBSCAN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract HDBSCAN info — extractHDBSCAN","text":"dstmtx Distance matrix minPts Minimum points hdbscan includePlot Whether include plot (requires cowplot.)","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/extractHDBSCAN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract HDBSCAN info — extractHDBSCAN","text":"List: df element tibble information per token: _id: comes rownames dstmtx cluster: gives clustering elements membprob: indicates membership probabilities eps: returns epsilon value includePlot TRUE, grob plot included hplot.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/filterFoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by First Order Parameters — filterFoc","title":"Filter by First Order Parameters — filterFoc","text":"Filter First Order Parameters","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/filterFoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by First Order Parameters — filterFoc","text":"","code":"filterFoc(   foc_param,   tid_data,   cw_selection,   is_dep_fun = function(foc_param) stringr::str_starts(foc_param, \"LEMMA\"),   max_steps_fun = function(foc_param) if (foc_param == \"LEMMAPATH2\") 2 else 3,   window_filter_fun = windowFilter,   pos_filter_fun = posFilter,   bound_filter_fun = function(foc_param) stringr::str_starts(foc_param, \"nobound\") )"},{"path":"https://montesmariana.github.io/semcloud/reference/filterFoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by First Order Parameters — filterFoc","text":"foc_param Character string coding relevant first-order parameters. tid_data Subsection context-word--token dataframe, outputted setupConcordancer, information one token. cw_selection Vector context words selected model token. is_dep_fun Function takes foc_param input returns TRUE dependency information collected FALSE model based bag--words instead. max_steps_fun Function takes foc_param input returns, dependency-based models, maximum number steps dependency path accept viable context words. window_filter_fun Function takes foc_param input returns vector list two elements: left right window sizes (bag--words models). pos_filter_fun Function takes foc_param input returns vector. vector empty, pos filter implemented, values, rows pos included vector selected. bound_filter_fun Function takes foc_param input returns TRUE words outside sentence modelled FALSE .","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/filterFoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by First Order Parameters — filterFoc","text":"Enriched dataframe including columns filtering information.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/filterWeight.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by Weighting Information — filterWeight","title":"Filter by Weighting Information — filterWeight","text":"Filter Weighting Information","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/filterWeight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by Weighting Information — filterWeight","text":"","code":"filterWeight(   weight_param,   tid_data,   weight_filter_fun = function(weightparam) stringr::str_ends(weightparam, \"no\", negate     = TRUE),   weight_as_sup = FALSE,   threshold = 0 )"},{"path":"https://montesmariana.github.io/semcloud/reference/filterWeight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by Weighting Information — filterWeight","text":"weight_param Character string coding relevant weighting information. tid_data Subsection context-word--token dataframe enriched filterFoc. weight_filter_fun Function takes weight_param input returns TRUE weighting included FALSE ignored. weight_as_sup weight values included superscript? threshold Weighting threshold context word included","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/filterWeight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by Weighting Information — filterWeight","text":"Enriched dataframe including columns filtering information.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/focdistsFromCsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Open type level distance matrices\nOpen a distance matrix stored as a .csv file. Replaces\ntokensFromPac for type level matrices. — focdistsFromCsv","title":"Open type level distance matrices\nOpen a distance matrix stored as a .csv file. Replaces\ntokensFromPac for type level matrices. — focdistsFromCsv","text":"Open type level distance matrices Open distance matrix stored .csv file. Replaces tokensFromPac type level matrices.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/focdistsFromCsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open type level distance matrices\nOpen a distance matrix stored as a .csv file. Replaces\ntokensFromPac for type level matrices. — focdistsFromCsv","text":"","code":"focdistsFromCsv(input_file)"},{"path":"https://montesmariana.github.io/semcloud/reference/focdistsFromCsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open type level distance matrices\nOpen a distance matrix stored as a .csv file. Replaces\ntokensFromPac for type level matrices. — focdistsFromCsv","text":"input_file Name file","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/focdistsFromCsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open type level distance matrices\nOpen a distance matrix stored as a .csv file. Replaces\ntokensFromPac for type level matrices. — focdistsFromCsv","text":"Distance matrix matrix ids rownames column names.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/fscore.html","id":null,"dir":"Reference","previous_headings":"","what":"F-score — fscore","title":"F-score — fscore","text":"Compute F-score precision recall.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/fscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"F-score — fscore","text":"","code":"fscore(precision, recall, b = 1)"},{"path":"https://montesmariana.github.io/semcloud/reference/fscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"F-score — fscore","text":"precision Precision recall Recall b Weight","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/fscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"F-score — fscore","text":"F-score","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getClouds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Clouds from distance matrix — getClouds","title":"Get Clouds from distance matrix — getClouds","text":"Read distance matrices different models, run dimensional reduction visualization based different techniques store coordinates corresponding model dataframe per technique. names models found models file paths searched input_dir: file found, warning issued.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getClouds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Clouds from distance matrix — getClouds","text":"","code":"getClouds(   input_dir,   output_dir,   files_list,   lemma,   solutions,   logrank = TRUE,   logdist = TRUE,   type = \"token\",   row_selection = vector() )"},{"path":"https://montesmariana.github.io/semcloud/reference/getClouds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Clouds from distance matrix — getClouds","text":"input_dir Directory token distance matrices stored. output_dir Directory data stored. files_list Liste filenames within input_dir. lemma Name lemma, filenames solutions Named list techniques run visualization possible technique values getFit. logrank Whether transform matrices transformMats. logdist Whether euclidean distances computed rows transformed matrices (logrank TRUE). Otherwise, matrix log-transformed ranks made symmetric. type Whether open files tokensFromPac (\"token\") focdistsFromCsv (otherwise). row_selection List row (column) names subset matrices.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getClouds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Clouds from distance matrix — getClouds","text":"List stresses (emtpy \"mds\" given.)","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getContext.html","id":null,"dir":"Reference","previous_headings":"","what":"Context from concordance dataframe — getContext","title":"Context from concordance dataframe — getContext","text":"dataframe one row per context word token columns elements (particular, word appropriate enrichment), create concordance line.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getContext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Context from concordance dataframe — getContext","text":"","code":"getContext(   tid,   cws,   foc_param = NA,   weight_param = NA,   cw_selection = NA,   clean_word_fun = cleanWord,   to_remove = c(\"<sentence>\"),   ... )"},{"path":"https://montesmariana.github.io/semcloud/reference/getContext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Context from concordance dataframe — getContext","text":"tid Token ID. cws Dataframe one row per context word per token, outputted setupConcordancer. foc_param Character string information first order filters. weight_param Character string information weighting filters. cw_selection List character string semicolon-separated values context words captured model. clean_word_fun Function clean word column. to_remove Vector word values remove altoghether. ... Arguments passed filterFoc filterWeight.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getContext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Context from concordance dataframe — getContext","text":"Character string (weighted) concordance line.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getContext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Context from concordance dataframe — getContext","text":"","code":"if (FALSE) { cws <- setupConcordancer(lemma, input_dir) getContext(tokenID, cws, 'bound5-5lex', 'PPMIweight', c('a/det', 'horse/noun', 'fast/adj')) }"},{"path":"https://montesmariana.github.io/semcloud/reference/getCoords.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coordinates from fit — getCoords","title":"Extract coordinates from fit — getCoords","text":"Extract coordinates fit","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getCoords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coordinates from fit — getCoords","text":"","code":"getCoords(fit, modelname, rownames, d = \"\", source = \"tsne\")"},{"path":"https://montesmariana.github.io/semcloud/reference/getCoords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coordinates from fit — getCoords","text":"fit Dimensionality reduction result; output getFit modelname Name model, names columns rownames List names rows d Output previous run , first run, empty string. source Technique used dimensionality reduction: either \"mds\" output metaMDS, \"tsne\" Rtsne, \"umap\" umap. (matches technique getFit).","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getCoords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract coordinates from fit — getCoords","text":"tibble coordinates element.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getDistMtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Distance Matrix — getDistMtx","title":"Get Distance Matrix — getDistMtx","text":"Store distances tsv return dist object.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getDistMtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Distance Matrix — getDistMtx","text":"","code":"getDistMtx(wwmx, source_dir, lemma, suffix = \"\")"},{"path":"https://montesmariana.github.io/semcloud/reference/getDistMtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Distance Matrix — getDistMtx","text":"wwmx Distance matrix outputted focdistsFromCsv. source_dir Directory store distance matrix lemma Name lemma, filename suffix Suffix add [lemma].models.dist filename","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getDistMtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Distance Matrix — getDistMtx","text":"Distance matrix dist object.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensionality reduction for visualization — getFit","title":"Dimensionality reduction for visualization — getFit","text":"Wrapper around metaMDS Rtsne dimensionality reduction certain set parameters.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensionality reduction for visualization — getFit","text":"","code":"getFit(d, dim = 2, technique, perp = 30, seed = 8541)"},{"path":"https://montesmariana.github.io/semcloud/reference/getFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensionality reduction for visualization — getFit","text":"d distance matrix matrix dim number dimensions, default 2. argument k metaMDS dims Rtsne technique either \"mds\" run metaMDS, \"tsne\" run Rtsne \"umap\" run umap perp perplexity value Rtsne, default 30. value ignored metaMDS run. seed seed keep randomness check","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensionality reduction for visualization — getFit","text":"output either metaMDS Rtsne.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/getFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dimensionality reduction for visualization — getFit","text":"metaMDS run trymax=20 trace=FALSE default, search best solution printed. Rtsne uses default parameters theta=0.0, check.duplicates = FALSE, max_iter = 1000.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/mantelMats.html","id":null,"dir":"Reference","previous_headings":"","what":"Mantel statistic between two matrices — mantelMats","title":"Mantel statistic between two matrices — mantelMats","text":"Mantel statistic two matrices","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/mantelMats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mantel statistic between two matrices — mantelMats","text":"","code":"mantelMats(mat1, mat2)"},{"path":"https://montesmariana.github.io/semcloud/reference/mantelMats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mantel statistic between two matrices — mantelMats","text":"mat1 First matrix mat2 Second matrix","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/mantelMats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mantel statistic between two matrices — mantelMats","text":"Statistic mantel two matrices.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/matricizeCloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn tibble into matrix — matricizeCloud","title":"Turn tibble into matrix — matricizeCloud","text":"Turn tibble matrix","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/matricizeCloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn tibble into matrix — matricizeCloud","text":"","code":"matricizeCloud(df, rownames = \"X_model\")"},{"path":"https://montesmariana.github.io/semcloud/reference/matricizeCloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn tibble into matrix — matricizeCloud","text":"df Tibble rownames Name column become row names. Default \"X_model\", work distances tibble.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/matricizeCloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn tibble into matrix — matricizeCloud","text":"Matrix right row names","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://montesmariana.github.io/semcloud/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/posFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract part-of-speech filter — posFilter","title":"Extract part-of-speech filter — posFilter","text":"Extract part--speech filter","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/posFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract part-of-speech filter — posFilter","text":"","code":"posFilter(foc_param)"},{"path":"https://montesmariana.github.io/semcloud/reference/posFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract part-of-speech filter — posFilter","text":"foc_param Character string coding relevant first-order parameters.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/posFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract part-of-speech filter — posFilter","text":"Character vector: empty pos filter applied, values selected otherwise.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/procMats.html","id":null,"dir":"Reference","previous_headings":"","what":"Procrustes between two matrices — procMats","title":"Procrustes between two matrices — procMats","text":"Procrustes two matrices","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/procMats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Procrustes between two matrices — procMats","text":"","code":"procMats(   mat1,   mat2,   mat1_name = \"first matrix\",   mat2_name = \"second matrix\",   transformed = TRUE )"},{"path":"https://montesmariana.github.io/semcloud/reference/procMats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Procrustes between two matrices — procMats","text":"mat1 First matrix mat2 Second matrix mat1_name Name first matrix, error log (default: \"first matrix\") mat2_name Name second matrix, error log (default: \"second matrix\") transformed Whether matrices transformed, just error log","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/procMats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Procrustes between two matrices — procMats","text":"Output procrustes two matrices","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/reorderPpmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder PPMI columns — reorderPpmi","title":"Reorder PPMI columns — reorderPpmi","text":"values ppmi used weight selection can included superindices.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/reorderPpmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder PPMI columns — reorderPpmi","text":"","code":"reorderPpmi(ppmi, pmi_columnname)"},{"path":"https://montesmariana.github.io/semcloud/reference/reorderPpmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder PPMI columns — reorderPpmi","text":"ppmi Dataframe row per context word columns frequency association measures/ pmi_columnname Name column weighting values interest.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/reorderPpmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder PPMI columns — reorderPpmi","text":"Dataframe cw column context word my_weight column weighting.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/separationkNN.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion of same-class nearest neighbours — separationkNN","title":"Proportion of same-class nearest neighbours — separationkNN","text":"function takes square matrix dmx contains item item distances, factor classes (many items rows, thus columns, dmx) assigns class item. function returns measure q well distances dmx 'capture' classification classes, distances taken  'capture classification' extent items (immediately) surrounded items class, items class. Next overall cluster quality data taken together, function also returns cluster quality individual points  cluster quality individual classes (well mean cluster quality classes). measures called q output function.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/separationkNN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion of same-class nearest neighbours — separationkNN","text":"","code":"separationkNN(dmx, classes, k = NULL, weights = c(\"linear\", \"s-curve\", \"none\"))"},{"path":"https://montesmariana.github.io/semcloud/reference/separationkNN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion of same-class nearest neighbours — separationkNN","text":"dmx square matrix containing item item distances classes factor length number rows columns dmx; class position classes class assigned item row column dmx k value k used identify k nearest neighbours. k specified, k taken either total number items divided ten (number items divided ten smaller size smallest class), size smallest class minus one (size smallest class minus one smaller total number items divided ten). default behaviour obviously crude attempt guessing sensible value k. time probably want overrule default behaviour. explicitly specify k, value one total number items minus one allowed. weights weights argument determines exactly cluster quality point derived class membership k nearest neighbours. cluster quality 'weighted mean class membership values neighbours (1=class target item; 0=different class)', weights determined weights argument. weights k numbers, first indicates weight closest neighbour, second indicates weight second closest neighbour, etc. sum weights always one. weights \"linear\", default situation, weights decrease linearly one progresses set neighbours (starting one closest target item). weights \"s-curve\", weights decrease one progresses set neigbours (starting one closest target item) according s-shape y<-(40:-40)/10; plot(1:81, exp(y) / (1 + exp(y)), type=\"l\"), actual weights rescaled add one. Finally, weight \"none\", connections path equal weight. actual weights used call separationkNN() can found weights components output.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/separationkNN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportion of same-class nearest neighbours — separationkNN","text":"object class clustqualkNN, list containing least following components: globqual global cluster quality q meanclassqual mean class-specific cluster quality values q classqual table class class-specific clusters quality q pointqual numeric vector item item-specific cluster quality q weights numeric vector weights used k number indication k used","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/separationkNN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proportion of same-class nearest neighbours — separationkNN","text":"q measures calculated follows: first, item item-specific cluster quality calculated. done calculating proportion 'class items' among k nearest neighbours. higher measure, better cluster quality item. However, calculated simply proportion, rather weighted mean values k nearest neighbours, 'class neighbour' value one, 'different class neighbour' value zero, weights neighbours can different settings (see ). default settings, weights decrease linearly rank 'distance item', weights add one. instance, k one weight 1. k 2, weights, starting closest nearest neighbour, .67 .33. k 3, weights .5, .33, .17. k 4, .4, .3, .2, .1. Etc. overall cluster quality data calculated mean cluster quality items. Additionally, cluster quality every class classes calculated mean cluster quality items belonging class. mean class quality, finally, mean class-specific class quality measures.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/separationkNN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion of same-class nearest neighbours — separationkNN","text":"","code":"# we create a 'point cloud', with points belonging to two classes points <- rbind(matrix(rnorm(100, 2, 2), ncol=2),                 matrix(rnorm(100, 4, 2), ncol=2))                 dst <- dist(points, diag=TRUE, upper=TRUE)                 classes <- as.factor(rep(c(\"a\",\"b\"), c(50, 50))) # we analyse the cluster quality, letting the procedure choose k fitkNN <- separationkNN(dst, classes) summary(fitkNN) #>               Length Class  Mode    #> classfreqs      2    table  numeric #> classqual       2    -none- numeric #> pointclass    100    factor numeric #> pointqual     100    -none- numeric #> globqual        1    -none- numeric #> meanclassqual   1    -none- numeric #> k               1    -none- numeric #> weights        10    -none- numeric fitkNN$globqual        # global cluster quality #> [1] 0.6530909 fitkNN$meanclassqual   # mean class quality #> [1] 0.6530909 fitkNN$classqual       # class-specific quality #>         a         b  #> 0.6661818 0.6400000   # we analyse the cluster quality, setting k to 25 fitkNN <- separationkNN(dst, classes, k=25) summary(fitkNN) #>               Length Class  Mode    #> classfreqs      2    table  numeric #> classqual       2    -none- numeric #> pointclass    100    factor numeric #> pointqual     100    -none- numeric #> globqual        1    -none- numeric #> meanclassqual   1    -none- numeric #> k               1    -none- numeric #> weights        25    -none- numeric"},{"path":"https://montesmariana.github.io/semcloud/reference/setupConcordancer.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Concordancer — setupConcordancer","title":"Set up Concordancer — setupConcordancer","text":"Prepare dataframes getContext.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/setupConcordancer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Concordancer — setupConcordancer","text":"","code":"setupConcordancer(   lemma = \"\",   input_dir = \"\",   cws_detail_path = file.path(input_dir, paste0(lemma, \".cws.detail.tsv\")),   ppmi_path = file.path(input_dir, paste0(lemma, \".ppmi.tsv\")),   pmi_columnname = \"pmi_4\",   distance_corrector_func = function(word) !stringr::str_starts(word, \"<\"),   lemma_from_tid_fun = function(tid) paste(stringr::str_split(tid, \"/\")[[1]][-c(3, 4)],     collapse = \"/\") )"},{"path":"https://montesmariana.github.io/semcloud/reference/setupConcordancer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up Concordancer — setupConcordancer","text":"lemma Name lemma: default filenames input_dir Directory files stored cws_detail_path Path dataframe one row per context word per token context words information token. Created listContextWords semasioFlow Python module. ppmi_path Path dataframe one context word per row frequency information pmi_columnname Name (prefix) column dataframe found ppmi_path weighting values stored. distance_corrector_func Function filter rows dataframe cws_detail_path based values word column, recalculate distances words. lemma_from_tid_fun Function extract target lemma tokenID.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/setupConcordancer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up Concordancer — setupConcordancer","text":"Enriched dataframe one row per context word per token, weight values, corrected distances column indicating right target lemma (case one).","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/summarizeHDBSCAN.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize HDBSCAN data for a model — summarizeHDBSCAN","title":"Summarize HDBSCAN data for a model — summarizeHDBSCAN","text":"Summarize HDBSCAN data model","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/summarizeHDBSCAN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize HDBSCAN data for a model — summarizeHDBSCAN","text":"","code":"summarizeHDBSCAN(   lemma,   modelname,   input_dir,   output_dir,   minPts = 8,   includePlot = FALSE,   coords_name = \".tsne.30\" )"},{"path":"https://montesmariana.github.io/semcloud/reference/summarizeHDBSCAN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize HDBSCAN data for a model — summarizeHDBSCAN","text":"lemma Name lemma, filenames modelname Name model, coordinates filename input_dir Directory distance matrix stored output_dir Directory coordinates stored. directory must contain: file coordinates tokens, name combining lemma coords_name ending .tsv. file coordinates context words, name combining lemma coords_name ending .cws.tsv. file semicolon-separated lists context words, name combining lemma .variables.tsv minPts Minimum points hdbscan includePlot Whether include plot (requires cowplot.) coords_name code coordinate files indicating type dimensionality reduction performed, filenames","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/summarizeHDBSCAN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize HDBSCAN data for a model — summarizeHDBSCAN","text":"list least two items: coords: tibble one row per token, coordinates pertinent file, information extractHDBSCAN well variables file. cws: tibble one row per context word cluster, output cwsForClusters, combined coordinates relevant file. hplot: includePlot, HDBSCAN plot.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/tokensFromPac.html","id":null,"dir":"Reference","previous_headings":"","what":"Open token distance matrix — tokensFromPac","title":"Open token distance matrix — tokensFromPac","text":"Open distance matrix stored .pac compressed file .npy file distances .meta file dimension names. Might work token--token distance matrices.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/tokensFromPac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open token distance matrix — tokensFromPac","text":"","code":"tokensFromPac(input_file)"},{"path":"https://montesmariana.github.io/semcloud/reference/tokensFromPac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open token distance matrix — tokensFromPac","text":"input_file Name file","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/tokensFromPac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open token distance matrix — tokensFromPac","text":"Distance matrix matrix ids rownames column names.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/transformMats.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-transform distance matrices — transformMats","title":"Log-transform distance matrices — transformMats","text":"Log-transform distance matrices","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/transformMats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-transform distance matrices — transformMats","text":"","code":"transformMats(mat, asDist = TRUE)"},{"path":"https://montesmariana.github.io/semcloud/reference/transformMats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-transform distance matrices — transformMats","text":"mat Distance matrix transform asDist Boolean: whether force matrix euclidean distance matrix.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/transformMats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-transform distance matrices — transformMats","text":"Double logged transformation ranked rows input matrix, matrix.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/weightConcordance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create weighted concordance lines — weightConcordance","title":"Create weighted concordance lines — weightConcordance","text":"code assumes lists context words stored columns starting _cws, followed name lemma model name first-order parameter settings can extracted (separated periods). creates weighted concordance lines stores columns following name pattern, starting _ctxt. addition, creates non weighted column _ctxt.raw.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/weightConcordance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create weighted concordance lines — weightConcordance","text":"","code":"weightConcordance(variables, cws, lemma, ...)"},{"path":"https://montesmariana.github.io/semcloud/reference/weightConcordance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create weighted concordance lines — weightConcordance","text":"variables Dataframe one row per token ID least columns prefixed _cws. semicolon-separated context words. cws Dataframe one row per token ID per context word outputted setupConcordancer. lemma Name lemma, process model names ... Arguments passed weightLemma getContext, order adapt different ways coding parameter settings.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/weightConcordance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create weighted concordance lines — weightConcordance","text":"Enriched variables dataframe columns containing weighted concordance lines.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/weightConcordance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create weighted concordance lines — weightConcordance","text":"","code":"if (FALSE) { cws <- setupConcordancer(lemma, input_dir) variables <- readr::read_tsv('path/to/file', lazy = F) ctxts <- weightConcordance(variables, cws, lemma) }"},{"path":"https://montesmariana.github.io/semcloud/reference/weightLemma.html","id":null,"dir":"Reference","previous_headings":"","what":"Tailor weighting function to a lemma — weightLemma","title":"Tailor weighting function to a lemma — weightLemma","text":"Tailor weighting function lemma","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/weightLemma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tailor weighting function to a lemma — weightLemma","text":"","code":"weightLemma(   cws,   foc_param_fun = function(m) stringr::str_split(m, \"\\\\.\")[[1]][[1]],   weight_param_fun = function(m) stringr::str_split(m, \"\\\\.\")[[1]][[2]],   sup_weight_fun = function(weightparam) stringr::str_ends(weightparam, \"weight\"),   ... )"},{"path":"https://montesmariana.github.io/semcloud/reference/weightLemma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tailor weighting function to a lemma — weightLemma","text":"cws Dataframe one row per token per context word, output setupConcordancer. foc_param_fun Function takes name model return character string first-order filters (used foc_param getContext thus filterFoc). weight_param_fun Function takes name model return character string weighting filters (used weight_param getContext thus filterWeight). sup_weight_fun Function takes output weight_param_fun input returns TRUE weighting values added superindices FALSE . fed filterWeight. ... Arguments passed getContext.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/weightLemma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tailor weighting function to a lemma — weightLemma","text":"Function takes token ID, list context words model name input calls getContext.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/windowFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract window filter — windowFilter","title":"Extract window filter — windowFilter","text":"Extract window filter","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/windowFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract window filter — windowFilter","text":"","code":"windowFilter(foc_param)"},{"path":"https://montesmariana.github.io/semcloud/reference/windowFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract window filter — windowFilter","text":"foc_param Character string coding relevant first-order parameters.","code":""},{"path":"https://montesmariana.github.io/semcloud/reference/windowFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract window filter — windowFilter","text":"Integer vector length 2 (list) left right window span lengths.","code":""}]
